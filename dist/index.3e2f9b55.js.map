{"mappings":"AAAA,MAAM,CAAC,CAAC,GAAI,MAAM,CAAC,MAAM,GAAG,SAAS,eAAe,EAAC;IACjD,IAAI,QAAQ,AAAC;IACb,IAAG,OAAO,eAAe,KAAK,QAAQ,EACjC,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC;SACnD,IAAG,eAAe,YAAY,KAAK,EACrC,QAAQ,GAAG,eAAe;IAC9B,CAAU,6BAAW;IAEL,OAAV;QACR,IAAI,EAAC,EAAE,EAAC;YACP,IAAI,IAAI,CAAC,GAAE,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAC/B,EAAE,CAAC,IAAI,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAE/B,OAAO,IAAI,CAAA;SACX;QACD,MAAM,IAAE;YACP,MAAM,KAAK,GAAG,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG;gBACd,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAG,EAAE,EAClC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;aAElC,CAAC;YACF,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;SACpB;QACD,QAAQ,IAAE;YACT,MAAM,KAAK,GAAG,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG;gBACd,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAG,EAAE,EACpC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC;aAEnC,CAAC;YACF,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;SACpB;QACD,KAAK,IAAE;YACN,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACtB;QAEA,QAAQ,EAAC,SAAS,EAAC;YACf,IAAI,IAAI,CAAC,GAAE,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAC9B,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YAExC,OAAO,IAAI,CAAG,0DAAgC;aAAnC;SACY;QAC3B,IAAI,EAAC,QAAQ,EAAC;YACV,IAAI,KAAK,GAAG,EAAE;YACd,IAAI,IAAI,CAAC,GAAE,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAAC;gBACjC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBACpE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;aAChC;YACD,KAAK,CAAC,MAAM,GAAG,IAAI,CAAG,iBAAa;YAAhB;YACf,OAAG,MAAM,CAAC,KAAK,CAAC,CAAA;SACvB;QACD,MAAM,EAAC,eAAe,CAAC,MAAM;QAC7B,GAAG,IAAE;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAa;aAAd;SACrB;KACD,CAAA;CACH","sources":["src/jquery.js"],"sourcesContent":["window.$ =  window.jQuery = function(selectorOrArray){   \r\n    let elements;\r\n    if(typeof selectorOrArray === 'string'){\r\n         elements = document.querySelectorAll(selectorOrArray)\r\n    } else if(selectorOrArray instanceof Array){\r\n         elements = selectorOrArray\r\n    }          //提供了一个全局函数\r\n   \r\n   return  {    //JQuery（选择器）用于获取对应的元素  但不返回这些元素 返回一个对象\r\n   each(fn){\r\n    for(let i =0; i<elements.length;i++){\r\n        fn.call(null,elements[i],i)\r\n    }\r\n    return this\r\n   },\r\n   parent(){\r\n    const array = []\r\n    this.each((node)=>{\r\n        if(array.indexOf(node.parentNode)===-1){\r\n            array.push(node.parentNode)\r\n        }\r\n    })\r\n    return jQuery(array)\r\n   },\r\n   children(){\r\n    const array = []\r\n    this.each((node)=>{\r\n        if(array.indexOf(node.childrenNode)===-1){\r\n            array.push(...node.children)\r\n        }\r\n    })\r\n    return jQuery(array)\r\n   },\r\n   print(){\r\n    console.log(elements);\r\n   },\r\n\r\n    addClass(className){    //称为JQuery构造出来的对象\r\n        for(let i =0;i<elements.length;i++){\r\n            elements[i].classList.add(className)\r\n        }\r\n        return this   //return api   //就是返回他自己  这是链式编程\r\n    },\r\n    find(selector){\r\n        let array = []\r\n        for(let i =0;i<elements.length;i++){\r\n          const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n          array = array.concat(elements2)\r\n        }\r\n        array.oldApi = this   //this 就是 api\r\n        return jQuery(array)\r\n    },\r\n    oldApi:selectorOrArray.oldApi,\r\n    end(){\r\n        return this.oldApi //this 就是 api\r\n    },\r\n   }\r\n} \r\n\r\n"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}